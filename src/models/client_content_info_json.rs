/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientContentInfoJson {
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    #[serde(rename = "uri")]
    pub uri: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "checksum", skip_serializing_if = "Option::is_none")]
    pub checksum: Option<String>,
    #[serde(rename = "contentId")]
    pub content_id: String,
    #[serde(rename = "type")]
    pub r#type: models::ContentType,
}

impl ClientContentInfoJson {
    pub fn new(tags: Vec<String>, uri: String, version: String, content_id: String, r#type: models::ContentType) -> ClientContentInfoJson {
        ClientContentInfoJson {
            tags,
            uri,
            version,
            checksum: None,
            content_id,
            r#type,
        }
    }
}

