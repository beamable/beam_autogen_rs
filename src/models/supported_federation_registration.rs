/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedFederationRegistration {
    #[serde(rename = "serviceName")]
    pub service_name: String,
    #[serde(rename = "routingKey", skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(rename = "federation", skip_serializing_if = "Option::is_none")]
    pub federation: Option<Vec<models::SupportedFederation>>,
    #[serde(rename = "trafficFilterEnabled")]
    pub traffic_filter_enabled: bool,
}

impl SupportedFederationRegistration {
    pub fn new(service_name: String, traffic_filter_enabled: bool) -> SupportedFederationRegistration {
        SupportedFederationRegistration {
            service_name,
            routing_key: None,
            federation: None,
            traffic_filter_enabled,
        }
    }
}

