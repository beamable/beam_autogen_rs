/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MicroserviceRegistrations {
    #[serde(rename = "routingKey", skip_serializing_if = "Option::is_none")]
    pub routing_key: Option<String>,
    #[serde(rename = "serviceName")]
    pub service_name: String,
    #[serde(rename = "trafficFilterEnabled", skip_serializing_if = "Option::is_none")]
    pub traffic_filter_enabled: Option<bool>,
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "pid")]
    pub pid: String,
    #[serde(rename = "instanceCount")]
    pub instance_count: i32,
    #[serde(rename = "startedById", skip_serializing_if = "Option::is_none")]
    pub started_by_id: Option<i64>,
    #[serde(rename = "federation", skip_serializing_if = "Option::is_none")]
    pub federation: Option<Vec<models::SupportedFederation>>,
    #[serde(rename = "beamoName", skip_serializing_if = "Option::is_none")]
    pub beamo_name: Option<String>,
}

impl MicroserviceRegistrations {
    pub fn new(service_name: String, cid: String, pid: String, instance_count: i32) -> MicroserviceRegistrations {
        MicroserviceRegistrations {
            routing_key: None,
            service_name,
            traffic_filter_enabled: None,
            cid,
            pid,
            instance_count,
            started_by_id: None,
            federation: None,
            beamo_name: None,
        }
    }
}

