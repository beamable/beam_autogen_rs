/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentBasicManifest {
    #[serde(rename = "archived", skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[serde(rename = "references")]
    pub references: Vec<models::ContentBasicManifestReferencesInner>,
    #[serde(rename = "publisherAccountId", skip_serializing_if = "Option::is_none")]
    pub publisher_account_id: Option<i64>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "checksum")]
    pub checksum: String,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "created")]
    pub created: i64,
}

impl ContentBasicManifest {
    pub fn new(references: Vec<models::ContentBasicManifestReferencesInner>, id: String, checksum: String, created: i64) -> ContentBasicManifest {
        ContentBasicManifest {
            archived: None,
            references,
            publisher_account_id: None,
            id,
            checksum,
            uid: None,
            created,
        }
    }
}

