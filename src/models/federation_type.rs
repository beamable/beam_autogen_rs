/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FederationType {
    #[serde(rename = "IFederatedPlayerInit")]
    IFederatedPlayerInit,
    #[serde(rename = "IFederatedInventory")]
    IFederatedInventory,
    #[serde(rename = "IFederatedLogin")]
    IFederatedLogin,
    #[serde(rename = "IFederatedGameServer")]
    IFederatedGameServer,
    #[serde(rename = "IFederatedCommerce")]
    IFederatedCommerce,

}

impl std::fmt::Display for FederationType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::IFederatedPlayerInit => write!(f, "IFederatedPlayerInit"),
            Self::IFederatedInventory => write!(f, "IFederatedInventory"),
            Self::IFederatedLogin => write!(f, "IFederatedLogin"),
            Self::IFederatedGameServer => write!(f, "IFederatedGameServer"),
            Self::IFederatedCommerce => write!(f, "IFederatedCommerce"),
        }
    }
}

impl Default for FederationType {
    fn default() -> FederationType {
        Self::IFederatedPlayerInit
    }
}

