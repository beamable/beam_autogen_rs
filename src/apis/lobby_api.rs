/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`api_lobbies_get`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesGetParams {
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub match_type: Option<String>
}

/// struct for passing parameters to the method [`api_lobbies_id_delete`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdDeleteParams {
    /// Id of the lobby
    pub id: String,
    /// Request including the player requested to remove
    pub remove_from_lobby: Option<models::RemoveFromLobby>
}

/// struct for passing parameters to the method [`api_lobbies_id_get`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdGetParams {
    /// The lobby id.
    pub id: String
}

/// struct for passing parameters to the method [`api_lobbies_id_metadata_put`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdMetadataPutParams {
    /// Id of the lobby
    pub id: String,
    /// The update lobby request.
    pub update_lobby: Option<models::UpdateLobby>
}

/// struct for passing parameters to the method [`api_lobbies_id_put`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdPutParams {
    /// Id of the lobby
    pub id: String,
    /// The join lobby request. Includes tags.
    pub join_lobby: Option<models::JoinLobby>
}

/// struct for passing parameters to the method [`api_lobbies_id_server_post`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdServerPostParams {
    /// Id of the lobby
    pub id: String,
    /// Includes an optional matchtype
    pub create_federated_game_server: Option<models::CreateFederatedGameServer>
}

/// struct for passing parameters to the method [`api_lobbies_id_tags_delete`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdTagsDeleteParams {
    /// Id of the lobby
    pub id: String,
    /// Includes the player ID and the tags to remove.
    pub remove_tags: Option<models::RemoveTags>
}

/// struct for passing parameters to the method [`api_lobbies_id_tags_put`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesIdTagsPutParams {
    /// Id of the lobby
    pub id: String,
    /// Includes the player ID and tags to add.
    pub add_tags: Option<models::AddTags>
}

/// struct for passing parameters to the method [`api_lobbies_passcode_put`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesPasscodePutParams {
    /// The join lobby request. Includes tags.
    pub join_lobby: Option<models::JoinLobby>
}

/// struct for passing parameters to the method [`api_lobbies_post`]
#[derive(Clone, Debug)]
pub struct ApiLobbiesPostParams {
    /// The Create request.
    pub create_lobby: Option<models::CreateLobby>
}


/// struct for typed errors of method [`api_lobbies_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_metadata_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdMetadataPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_server_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdServerPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_tags_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdTagsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_id_tags_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesIdTagsPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_passcode_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesPasscodePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_lobbies_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiLobbiesPostError {
    UnknownValue(serde_json::Value),
}


/// Query for active lobbies
pub async fn api_lobbies_get(configuration: &configuration::Configuration, params: ApiLobbiesGetParams) -> Result<models::LobbyQueryResponse, Error<ApiLobbiesGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let skip = params.skip;
    let limit = params.limit;
    let match_type = params.match_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = skip {
        local_var_req_builder = local_var_req_builder.query(&[("Skip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("Limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = match_type {
        local_var_req_builder = local_var_req_builder.query(&[("MatchType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove the requested player from the lobby. The host is able to remove anyone. Others may  only remove themselves without error.
pub async fn api_lobbies_id_delete(configuration: &configuration::Configuration, params: ApiLobbiesIdDeleteParams) -> Result<serde_json::Value, Error<ApiLobbiesIdDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let remove_from_lobby = params.remove_from_lobby;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&remove_from_lobby);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the current status of a lobby by id.
pub async fn api_lobbies_id_get(configuration: &configuration::Configuration, params: ApiLobbiesIdGetParams) -> Result<models::Lobby, Error<ApiLobbiesIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update the properties of a lobby
pub async fn api_lobbies_id_metadata_put(configuration: &configuration::Configuration, params: ApiLobbiesIdMetadataPutParams) -> Result<models::Lobby, Error<ApiLobbiesIdMetadataPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let update_lobby = params.update_lobby;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}/metadata", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_lobby);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdMetadataPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Join a lobby
pub async fn api_lobbies_id_put(configuration: &configuration::Configuration, params: ApiLobbiesIdPutParams) -> Result<models::Lobby, Error<ApiLobbiesIdPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let join_lobby = params.join_lobby;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&join_lobby);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invoke the Lobby actor to make the federated game server request.
pub async fn api_lobbies_id_server_post(configuration: &configuration::Configuration, params: ApiLobbiesIdServerPostParams) -> Result<serde_json::Value, Error<ApiLobbiesIdServerPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let create_federated_game_server = params.create_federated_game_server;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}/server", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_federated_game_server);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdServerPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove the request tags from the requested player.
pub async fn api_lobbies_id_tags_delete(configuration: &configuration::Configuration, params: ApiLobbiesIdTagsDeleteParams) -> Result<models::Lobby, Error<ApiLobbiesIdTagsDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let remove_tags = params.remove_tags;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}/tags", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&remove_tags);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdTagsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add the request tags to the requested player.
pub async fn api_lobbies_id_tags_put(configuration: &configuration::Configuration, params: ApiLobbiesIdTagsPutParams) -> Result<models::Lobby, Error<ApiLobbiesIdTagsPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let add_tags = params.add_tags;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/{id}/tags", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&add_tags);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesIdTagsPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Join a lobby by passcode.
pub async fn api_lobbies_passcode_put(configuration: &configuration::Configuration, params: ApiLobbiesPasscodePutParams) -> Result<models::Lobby, Error<ApiLobbiesPasscodePutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let join_lobby = params.join_lobby;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies/passcode", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&join_lobby);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesPasscodePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a lobby. A leader is not necessary to create a lobby.
pub async fn api_lobbies_post(configuration: &configuration::Configuration, params: ApiLobbiesPostParams) -> Result<models::Lobby, Error<ApiLobbiesPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_lobby = params.create_lobby;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/lobbies", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_lobby);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_content = local_var_resp.text().await?;
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_content = local_var_resp.text().await?;
        let local_var_entity: Option<ApiLobbiesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

