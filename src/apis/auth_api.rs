/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`api_auth_refresh_token_post`]
#[derive(Clone, Debug)]
pub struct ApiAuthRefreshTokenPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// `RefreshTokenAuthRequest`
    pub refresh_token_auth_request: Option<models::RefreshTokenAuthRequest>
}

/// struct for passing parameters to the method [`api_auth_server_post`]
#[derive(Clone, Debug)]
pub struct ApiAuthServerPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// `ServerTokenAuthRequest`
    pub server_token_auth_request: Option<models::ServerTokenAuthRequest>
}

/// struct for passing parameters to the method [`api_auth_tokens_guest_post`]
#[derive(Clone, Debug)]
pub struct ApiAuthTokensGuestPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// `GuestAuthRequest`
    pub guest_auth_request: Option<models::GuestAuthRequest>
}

/// struct for passing parameters to the method [`api_auth_tokens_password_post`]
#[derive(Clone, Debug)]
pub struct ApiAuthTokensPasswordPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// `PasswordAuthRequest`
    pub password_auth_request: Option<models::PasswordAuthRequest>
}

/// struct for passing parameters to the method [`api_auth_tokens_refresh_token_post`]
#[derive(Clone, Debug)]
pub struct ApiAuthTokensRefreshTokenPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// `RefreshTokenAuthRequest`
    pub refresh_token_auth_request: Option<models::RefreshTokenAuthRequest>
}


/// struct for typed errors of method [`api_auth_refresh_token_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthRefreshTokenPostError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_server_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthServerPostError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_tokens_guest_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthTokensGuestPostError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_tokens_password_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthTokensPasswordPostError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_auth_tokens_refresh_token_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAuthTokensRefreshTokenPostError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}


/// Generate a new access token for previously authenticated account. DEPRECATED: Use `tokens/refresh-token` instead.
pub async fn api_auth_refresh_token_post(configuration: &configuration::Configuration, params: ApiAuthRefreshTokenPostParams) -> Result<models::AuthResponse, Error<ApiAuthRefreshTokenPostError>> {

    let uri_str = format!("{}/api/auth/refresh-token", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.refresh_token_auth_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthRefreshTokenPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generate a new access token for a machine with a shared secret
pub async fn api_auth_server_post(configuration: &configuration::Configuration, params: ApiAuthServerPostParams) -> Result<models::ServerTokenResponse, Error<ApiAuthServerPostError>> {

    let uri_str = format!("{}/api/auth/server", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.server_token_auth_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ServerTokenResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ServerTokenResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthServerPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generate a new access token for a brand-new player.
pub async fn api_auth_tokens_guest_post(configuration: &configuration::Configuration, params: ApiAuthTokensGuestPostParams) -> Result<models::AuthResponse, Error<ApiAuthTokensGuestPostError>> {

    let uri_str = format!("{}/api/auth/tokens/guest", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.guest_auth_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthTokensGuestPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generate a new access token when given email and password credentials
pub async fn api_auth_tokens_password_post(configuration: &configuration::Configuration, params: ApiAuthTokensPasswordPostParams) -> Result<models::AuthResponse, Error<ApiAuthTokensPasswordPostError>> {

    let uri_str = format!("{}/api/auth/tokens/password", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.password_auth_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthTokensPasswordPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generate a new access token for previously authenticated account.
pub async fn api_auth_tokens_refresh_token_post(configuration: &configuration::Configuration, params: ApiAuthTokensRefreshTokenPostParams) -> Result<models::AuthResponse, Error<ApiAuthTokensRefreshTokenPostError>> {

    let uri_str = format!("{}/api/auth/tokens/refresh-token", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.refresh_token_auth_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiAuthTokensRefreshTokenPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

