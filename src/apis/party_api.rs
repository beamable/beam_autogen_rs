/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`api_parties_id_get`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdGetParams {
    /// Id of the party
    pub id: String
}

/// struct for passing parameters to the method [`api_parties_id_invite_delete`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdInviteDeleteParams {
    /// Id of the party
    pub id: String,
    /// Player to be uninvited
    pub cancel_invite_to_party: Option<models::CancelInviteToParty>
}

/// struct for passing parameters to the method [`api_parties_id_invite_post`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdInvitePostParams {
    /// Id of the party
    pub id: String,
    /// Player to invite to the party
    pub invite_to_party: Option<models::InviteToParty>
}

/// struct for passing parameters to the method [`api_parties_id_members_delete`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdMembersDeleteParams {
    /// Id of the party
    pub id: String,
    /// The leave party request
    pub leave_party: Option<models::LeaveParty>
}

/// struct for passing parameters to the method [`api_parties_id_metadata_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdMetadataPutParams {
    /// Id of the party
    pub id: String,
    /// Argument to pass to the party actor to update state.
    pub update_party: Option<models::UpdateParty>
}

/// struct for passing parameters to the method [`api_parties_id_promote_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdPromotePutParams {
    /// Id of the party
    pub id: String,
    /// Player to promote to leader
    pub promote_new_leader: Option<models::PromoteNewLeader>
}

/// struct for passing parameters to the method [`api_parties_id_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdPutParams {
    /// Id of the party
    pub id: String
}

/// struct for passing parameters to the method [`api_parties_post`]
#[derive(Clone, Debug)]
pub struct ApiPartiesPostParams {
    /// Argument to pass to the party actor to initialize state.
    pub create_party: Option<models::CreateParty>
}


/// struct for typed errors of method [`api_parties_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_invite_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdInviteDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_invite_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdInvitePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_members_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdMembersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_metadata_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdMetadataPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_promote_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdPromotePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesPostError {
    UnknownValue(serde_json::Value),
}


/// Return the status of a party.
pub async fn api_parties_id_get(configuration: &configuration::Configuration, params: ApiPartiesIdGetParams) -> Result<models::Party, Error<ApiPartiesIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cancel party invitation.
pub async fn api_parties_id_invite_delete(configuration: &configuration::Configuration, params: ApiPartiesIdInviteDeleteParams) -> Result<serde_json::Value, Error<ApiPartiesIdInviteDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let cancel_invite_to_party = params.cancel_invite_to_party;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}/invite", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&cancel_invite_to_party);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdInviteDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invite a player to a party
pub async fn api_parties_id_invite_post(configuration: &configuration::Configuration, params: ApiPartiesIdInvitePostParams) -> Result<serde_json::Value, Error<ApiPartiesIdInvitePostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let invite_to_party = params.invite_to_party;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}/invite", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&invite_to_party);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdInvitePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove the requested player from the party. The leader is able to remove anyone. Others may  only remove themselves without error.
pub async fn api_parties_id_members_delete(configuration: &configuration::Configuration, params: ApiPartiesIdMembersDeleteParams) -> Result<serde_json::Value, Error<ApiPartiesIdMembersDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let leave_party = params.leave_party;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}/members", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&leave_party);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdMembersDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates party state.
pub async fn api_parties_id_metadata_put(configuration: &configuration::Configuration, params: ApiPartiesIdMetadataPutParams) -> Result<models::Party, Error<ApiPartiesIdMetadataPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let update_party = params.update_party;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}/metadata", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_party);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdMetadataPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Promote a party member to leader.
pub async fn api_parties_id_promote_put(configuration: &configuration::Configuration, params: ApiPartiesIdPromotePutParams) -> Result<models::Party, Error<ApiPartiesIdPromotePutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let promote_new_leader = params.promote_new_leader;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}/promote", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&promote_new_leader);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdPromotePutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Join a party
pub async fn api_parties_id_put(configuration: &configuration::Configuration, params: ApiPartiesIdPutParams) -> Result<models::Party, Error<ApiPartiesIdPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a party for the current player.
pub async fn api_parties_post(configuration: &configuration::Configuration, params: ApiPartiesPostParams) -> Result<models::Party, Error<ApiPartiesPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_party = params.create_party;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/parties", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_party);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiPartiesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

