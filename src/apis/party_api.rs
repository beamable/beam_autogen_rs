/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`api_parties_id_get`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdGetParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>
}

/// struct for passing parameters to the method [`api_parties_id_invite_delete`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdInviteDeleteParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// Player to be uninvited
    pub cancel_invite_to_party: Option<models::CancelInviteToParty>
}

/// struct for passing parameters to the method [`api_parties_id_invite_post`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdInvitePostParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// Player to invite to the party
    pub invite_to_party: Option<models::InviteToParty>
}

/// struct for passing parameters to the method [`api_parties_id_members_delete`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdMembersDeleteParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// The leave party request
    pub leave_party: Option<models::LeaveParty>
}

/// struct for passing parameters to the method [`api_parties_id_metadata_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdMetadataPutParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// Argument to pass to the party actor to update state.
    pub update_party: Option<models::UpdateParty>
}

/// struct for passing parameters to the method [`api_parties_id_promote_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdPromotePutParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// Player to promote to leader
    pub promote_new_leader: Option<models::PromoteNewLeader>
}

/// struct for passing parameters to the method [`api_parties_id_put`]
#[derive(Clone, Debug)]
pub struct ApiPartiesIdPutParams {
    /// Id of the party
    pub id: String,
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>
}

/// struct for passing parameters to the method [`api_parties_post`]
#[derive(Clone, Debug)]
pub struct ApiPartiesPostParams {
    /// Customer and project scope. This should be in the form of '{customerId}.{projectId}'. This is only necessary when not using a JWT bearer token
    pub x_beam_scope: Option<String>,
    /// Override the playerId of the requester. This is only necessary when not using a JWT bearer token.
    pub x_beam_gamertag: Option<String>,
    /// Argument to pass to the party actor to initialize state.
    pub create_party: Option<models::CreateParty>
}


/// struct for typed errors of method [`api_parties_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_invite_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdInviteDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_invite_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdInvitePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_members_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdMembersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_metadata_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdMetadataPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_promote_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdPromotePutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesIdPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_parties_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiPartiesPostError {
    UnknownValue(serde_json::Value),
}


/// Return the status of a party.
pub async fn api_parties_id_get(configuration: &configuration::Configuration, params: ApiPartiesIdGetParams) -> Result<models::Party, Error<ApiPartiesIdGetError>> {

    let uri_str = format!("{}/api/parties/{id}", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Cancel party invitation.
pub async fn api_parties_id_invite_delete(configuration: &configuration::Configuration, params: ApiPartiesIdInviteDeleteParams) -> Result<serde_json::Value, Error<ApiPartiesIdInviteDeleteError>> {

    let uri_str = format!("{}/api/parties/{id}/invite", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.cancel_invite_to_party);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdInviteDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Invite a player to a party
pub async fn api_parties_id_invite_post(configuration: &configuration::Configuration, params: ApiPartiesIdInvitePostParams) -> Result<serde_json::Value, Error<ApiPartiesIdInvitePostError>> {

    let uri_str = format!("{}/api/parties/{id}/invite", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.invite_to_party);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdInvitePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove the requested player from the party. The leader is able to remove anyone. Others may  only remove themselves without error.
pub async fn api_parties_id_members_delete(configuration: &configuration::Configuration, params: ApiPartiesIdMembersDeleteParams) -> Result<serde_json::Value, Error<ApiPartiesIdMembersDeleteError>> {

    let uri_str = format!("{}/api/parties/{id}/members", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.leave_party);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdMembersDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates party state.
pub async fn api_parties_id_metadata_put(configuration: &configuration::Configuration, params: ApiPartiesIdMetadataPutParams) -> Result<models::Party, Error<ApiPartiesIdMetadataPutError>> {

    let uri_str = format!("{}/api/parties/{id}/metadata", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.update_party);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdMetadataPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Promote a party member to leader.
pub async fn api_parties_id_promote_put(configuration: &configuration::Configuration, params: ApiPartiesIdPromotePutParams) -> Result<models::Party, Error<ApiPartiesIdPromotePutError>> {

    let uri_str = format!("{}/api/parties/{id}/promote", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.promote_new_leader);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdPromotePutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Join a party
pub async fn api_parties_id_put(configuration: &configuration::Configuration, params: ApiPartiesIdPutParams) -> Result<models::Party, Error<ApiPartiesIdPutError>> {

    let uri_str = format!("{}/api/parties/{id}", configuration.base_path, id=crate::apis::urlencode(params.id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a party for the current player.
pub async fn api_parties_post(configuration: &configuration::Configuration, params: ApiPartiesPostParams) -> Result<models::Party, Error<ApiPartiesPostError>> {

    let uri_str = format!("{}/api/parties", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = params.x_beam_scope {
        req_builder = req_builder.header("X-BEAM-SCOPE", param_value.to_string());
    }
    if let Some(param_value) = params.x_beam_gamertag {
        req_builder = req_builder.header("X-BEAM-GAMERTAG", param_value.to_string());
    }
    req_builder = req_builder.json(&params.create_party);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiPartiesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

