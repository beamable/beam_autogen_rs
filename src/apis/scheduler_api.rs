/*
 * Beamable API
 *
 * Autogenerated Beamable API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`api_internal_scheduler_job_execute_post`]
#[derive(Clone, Debug)]
pub struct ApiInternalSchedulerJobExecutePostParams {
    /// 
    pub job_execution_event: Option<models::JobExecutionEvent>
}

/// struct for passing parameters to the method [`api_internal_scheduler_job_post`]
#[derive(Clone, Debug)]
pub struct ApiInternalSchedulerJobPostParams {
    pub job_definition_save_request: Option<models::JobDefinitionSaveRequest>
}

/// struct for passing parameters to the method [`api_scheduler_job_job_id_activity_get`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobJobIdActivityGetParams {
    pub job_id: String,
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`api_scheduler_job_job_id_cancel_put`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobJobIdCancelPutParams {
    pub job_id: String
}

/// struct for passing parameters to the method [`api_scheduler_job_job_id_delete`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobJobIdDeleteParams {
    pub job_id: String
}

/// struct for passing parameters to the method [`api_scheduler_job_job_id_get`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobJobIdGetParams {
    pub job_id: String
}

/// struct for passing parameters to the method [`api_scheduler_job_job_id_next_executions_get`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobJobIdNextExecutionsGetParams {
    pub job_id: String,
    pub from: Option<String>,
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`api_scheduler_job_post`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobPostParams {
    pub job_definition_save_request: Option<models::JobDefinitionSaveRequest>
}

/// struct for passing parameters to the method [`api_scheduler_jobs_get`]
#[derive(Clone, Debug)]
pub struct ApiSchedulerJobsGetParams {
    pub source: Option<String>,
    pub name: Option<String>,
    pub limit: Option<i32>
}


/// struct for typed errors of method [`api_internal_scheduler_job_execute_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInternalSchedulerJobExecutePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_internal_scheduler_job_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInternalSchedulerJobPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_job_id_activity_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobJobIdActivityGetError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_job_id_cancel_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobJobIdCancelPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_job_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobJobIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_job_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobJobIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_job_id_next_executions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobJobIdNextExecutionsGetError {
    Status400(models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_job_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_scheduler_jobs_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiSchedulerJobsGetError {
    UnknownValue(serde_json::Value),
}


/// Called by the Dispatcher lambda function to start a job execution at the appropriate time.
pub async fn api_internal_scheduler_job_execute_post(configuration: &configuration::Configuration, params: ApiInternalSchedulerJobExecutePostParams) -> Result<models::JobExecutionResult, Error<ApiInternalSchedulerJobExecutePostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_execution_event = params.job_execution_event;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/internal/scheduler/job/execute", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&job_execution_event);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiInternalSchedulerJobExecutePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_internal_scheduler_job_post(configuration: &configuration::Configuration, params: ApiInternalSchedulerJobPostParams) -> Result<models::JobDefinition, Error<ApiInternalSchedulerJobPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_definition_save_request = params.job_definition_save_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/internal/scheduler/job", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&job_definition_save_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiInternalSchedulerJobPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_job_id_activity_get(configuration: &configuration::Configuration, params: ApiSchedulerJobJobIdActivityGetParams) -> Result<Vec<models::JobActivity>, Error<ApiSchedulerJobJobIdActivityGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_id = params.job_id;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job/{jobId}/activity", local_var_configuration.base_path, jobId=crate::apis::urlencode(job_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobJobIdActivityGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_job_id_cancel_put(configuration: &configuration::Configuration, params: ApiSchedulerJobJobIdCancelPutParams) -> Result<serde_json::Value, Error<ApiSchedulerJobJobIdCancelPutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_id = params.job_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job/{jobId}/cancel", local_var_configuration.base_path, jobId=crate::apis::urlencode(job_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobJobIdCancelPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_job_id_delete(configuration: &configuration::Configuration, params: ApiSchedulerJobJobIdDeleteParams) -> Result<serde_json::Value, Error<ApiSchedulerJobJobIdDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_id = params.job_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job/{jobId}", local_var_configuration.base_path, jobId=crate::apis::urlencode(job_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobJobIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_job_id_get(configuration: &configuration::Configuration, params: ApiSchedulerJobJobIdGetParams) -> Result<models::JobDefinition, Error<ApiSchedulerJobJobIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_id = params.job_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job/{jobId}", local_var_configuration.base_path, jobId=crate::apis::urlencode(job_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobJobIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_job_id_next_executions_get(configuration: &configuration::Configuration, params: ApiSchedulerJobJobIdNextExecutionsGetParams) -> Result<Vec<String>, Error<ApiSchedulerJobJobIdNextExecutionsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_id = params.job_id;
    let from = params.from;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job/{jobId}/next-executions", local_var_configuration.base_path, jobId=crate::apis::urlencode(job_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobJobIdNextExecutionsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_job_post(configuration: &configuration::Configuration, params: ApiSchedulerJobPostParams) -> Result<models::JobDefinition, Error<ApiSchedulerJobPostError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let job_definition_save_request = params.job_definition_save_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/job", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&job_definition_save_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_scheduler_jobs_get(configuration: &configuration::Configuration, params: ApiSchedulerJobsGetParams) -> Result<Vec<models::JobDefinition>, Error<ApiSchedulerJobsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let source = params.source;
    let name = params.name;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/scheduler/jobs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiSchedulerJobsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

